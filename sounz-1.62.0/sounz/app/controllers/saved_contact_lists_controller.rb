class SavedContactListsController < ApplicationController

  include SavedContactListsHelper
  include ApplicationHelper

  def index
    list
    render :action => 'list'
  end

  # GETs should be safe (see http://www.w3.org/2001/tag/doc/whenToUseGet.html)
  verify :method => :post, :only => [ :destroy, :create, :update ],
         :redirect_to => { :action => :list }

  def list
    @saved_contact_lists = SavedContactList.paginate( :page => params[:page], 
                                                               :per_page => 20, 
                                                               :order => 'list_name')
  end

  # GENERATED BY SCAFFOLDING, NOT USED ANYWHERE
  def show
    @saved_contact_list = SavedContactList.find(params[:id])
  end

  #--------------------------
  #- New Saved Contact List -
  #--------------------------
  def new
    @saved_contact_list = SavedContactList.new
  end

  #--------------------------------------------------
  #- Create (save) new Saved Contact List in the db -
  #--------------------------------------------------
  def create
    @saved_contact_list = SavedContactList.new(params[:saved_contact_list])
    
    # updated by
    @saved_contact_list.updated_by = get_user.login_id
    
    if @saved_contact_list.save
      flash[:notice] = 'Saved Contact List was successfully created.'
      redirect_to :action => 'edit', :id => @saved_contact_list
    else
      render :action => 'new'
    end
  end

  #---------------------------
  #- Edit Saved Contact List -
  #---------------------------
  def edit
    @saved_contact_list = SavedContactList.find(params[:id])
    # search results contacts if any 
    @search_contacts = session[SELECTED_CONTACTS]
    
	# refresh session list_contacts_to_remove
	# select only those that do belong to list
    if !session[:list_contacts_to_remove].blank?
	  session[:list_contacts_to_remove] = session[:list_contacts_to_remove].select{|c| @saved_contact_list.role_contactinfos.include?(c)}
    end
	
	# existing list contacts 
    # to avoid adding duplicates to list
    # they will be displayed without checkbox
    @existing_contacts = @saved_contact_list.role_contactinfos
	
	paginate_role_contactinfos
  end

  #----------------------------------------------
  #- Update (save) Saved Contact List in the db -
  #----------------------------------------------
  def update
    @saved_contact_list = SavedContactList.find(params[:id])
    
    # updated by
    @saved_contact_list.updated_by = get_user.login_id
    
    if @saved_contact_list.update_attributes(params[:saved_contact_list])
      flash[:notice] = 'Saved Contact List was successfully updated.'
      redirect_to :action => 'edit', :id => @saved_contact_list
    else
      paginate_role_contactinfos
	  
      render :action => 'edit'
    end
  end

  #-----------------------------------------
  #- Delete Saved Contact List from the db -
  #-----------------------------------------
  def destroy
    saved_contact_list = SavedContactList.find(params[:id])
    
    role_contactinfos = saved_contact_list.role_contactinfos
    
    # delete saved contact list
    saved_contact_list.destroy
    
    # update all saved contact list role_contactinfos for
    # solr indexing
    role_contactinfos.each do |rc|
      rc.save
    end
        
    redirect_to :action => 'list'
  end
  
  #----------------------
  #- Redirect to search -
  #----------------------
  def contactsSearch
    @saved_contact_list = SavedContactList.find(params[:id])
    session[:saved_contact_list_id] = @saved_contact_list.id
    
    # assign saved contact list contacts to session
    session[:list_contacts] = @saved_contact_list.role_contactinfos
    
    flash[:notice] = " You are adding contacts to <b>'" + @saved_contact_list.list_name + "'</b> saved list"
    
    redirect_to :controller => 'search_contacts'
  end
  
  #-------------------------------------------------
  #- Add selected (a possible) contact to the list -
  #-------------------------------------------------
  def add_selected_contacts_to_list
    @saved_contact_list = SavedContactList.find(params[:id])
    logger.debug "**** ADD SELECTED CONTACT LIST ****"
    show_params(params)
    
    # existing list contacts 
    # to avoid adding duplicates to list
    # they will be displayed without checkbox
    @existing_contacts = @saved_contact_list.role_contactinfos
    
    # selected contacts
    @contact_ids = params[:role_contactinfos][:ids]
        
    @contacts = Array.new
    
    for contact in @contact_ids
      contact = contact.gsub('role_contactinfo_', '')
      role_contactinfo = RoleContactinfo.find(contact)
      @saved_contact_list.add_contact(role_contactinfo)
            
      @search_contacts = session[SELECTED_CONTACTS]
      @search_contacts.delete(role_contactinfo)
      session[SELECTED_CONTACTS] = @search_contacts
      
      # now get ids for RJS highlighting
      @contacts.push(generate_id(role_contactinfo))
    end
    
  end
  
  #--------------------------------------
  #- Add a search results to the list -
  #--------------------------------------
  def add_search_results_contacts_to_list
    
    saved_contact_list = SavedContactList.find(params[:id])
    logger.debug "**** ADD SEARCH RESULTS CONTACTS LIST ****"
    show_params(params)
    
    # we start with two session variables: contacts_to_add
    # and SELECTED_CONTACTS
    # difference between them - SELECTED_CONTACTS collects
    # all contacts selected from Search Results section of
    # search_contacts/, contacts_to_add contains only those
    # contacts who were ticked to be added to the list
    contact_ids = session[:contacts_to_add]
    selected_contacts = session[SELECTED_CONTACTS]
    
    contact_ids.each do |c|
      # if contact is added to a list,
      # delete this contact from SELECTED_CONTACTS session 
      # variable, so it is not displayed in 'Possible Contacts'
      # section
      if saved_contact_list.add_contact(c)
        selected_contacts = selected_contacts - [c]
      end
    end
        
    session[SELECTED_CONTACTS] = selected_contacts
    
    # we don't need those anymore  
    session[:contacts_to_add] = nil
    session[:saved_contact_list_id] = nil
    
	# WR#53662 - system performance issues:
	# solr re-indexing of role contactinfos takes a lot of time
	# for large lists, as per Scilla's note dated 12:44 23-05-2008
	# commented out solr re-indexing
	#RoleContactinfo.index_objects(contact_ids)
	
    redirect_to :action => 'edit', :id => saved_contact_list.id
    
  end
  
  #----------------------------------------------
  #- Dynamically removes contacts from the list -
  #----------------------------------------------
  def removeContactsFromList
    @saved_contact_list = SavedContactList.find(params[:id])
    
	#logger.debug "**** ADD NEW CONTACT LIST ****"
    #show_params(params)
    
	#contact_ids = params[:role_contactinfos][:ids]
	
	# case for removing all
	if params[:remove] == 'all'
	    
	  contact_ids = @saved_contact_list.role_contactinfos.map{|rc| rc.role_contactinfo_id}
	  session[:list_contacts_to_remove]  = Array.new
	  
	# case for removing seleted only 
	else
	  
	  selected_role_contactinfos = session[:list_contacts_to_remove]
	  contact_ids = selected_role_contactinfos.map{|rc| rc.role_contactinfo_id}
	  
	end
	
	#@contacts = Array.new
    
	contact_ids.each do |contact|    
      #contact = contact.to_s.gsub('role_contactinfo_', '')
      role_contactinfo = RoleContactinfo.find(contact)
	  
	  session[:list_contacts_to_remove].delete(role_contactinfo) if @saved_contact_list.remove_contact(role_contactinfo)
      
      # Update the possible contacts
      #@search_contacts = session[SELECTED_CONTACTS]
      # writing removed contact back to session
      #@search_contacts << contact
      #session[SELECTED_CONTACTS] = @search_contacts
      
      # now get ids for RJS highlighting
      #@contacts.push(generate_id(role_contactinfo))
    end
	
	# existing list contacts 
	# to avoid adding duplicates to list
	# they will be displayed without checkbox
	@existing_contacts = @saved_contact_list.role_contactinfos	

	# WR#53662 - system performance issues:
	# solr re-indexing of role contactinfos takes a lot of time
	# for large lists, as per Scilla's note dated 12:44 23-05-2008
	# commented out solr re-indexing	
	#RoleContactinfo.index_objects(contact_ids)
	
	paginate_role_contactinfos
    
  end
  
  #---------------------------------------------------
  #- Creates a clone of a saved contact list details -
  #---------------------------------------------------
  def copy
	saved_contact_list_to_clone = SavedContactList.find(params[:id])
		
	@saved_contact_list = saved_contact_list_to_clone.clone
	
	# add copy to the list name for clarity
	@saved_contact_list.list_name = "Copy of '#{@saved_contact_list.list_name}'"
			
	# copy saved_contact_list_to_clone role contactinfos
	saved_contact_list_to_clone.role_contactinfos.each do |rc|
	  @saved_contact_list.role_contactinfos << RoleContactinfo.find(rc.role_contactinfo_id)
	end
	
	# delete created_at assigned from saved_contact_list_to_clone created_at value
	# as we need created_at be actual time of creating the copy
	@saved_contact_list.created_at = nil	
	
	# updated by
	@saved_contact_list.updated_by = get_user.login_id
		
	if @saved_contact_list.save
	  flash[:notice] = 'Saved Contact List clone was successfully created.'
	  redirect_to :action => 'edit', :id => @saved_contact_list
	else
	  flash[:error] = 'Saved Contact List cloning has failed.'
	  render :action => 'edit', :id => saved_contact_list_to_clone.id
	end 
	
  end
  
  #------------------------------------
  #- Set 'contacts to remove' in session -
  #------------------------------------
  def set_selected_contacts
    #logger.debug "****** UPDATE SELECTED CONTACTS *****"
    show_params(params)
	
	session[:list_contacts_to_remove] = Array.new if session[:list_contacts_to_remove].blank?
	
	role_contactinfos_ids = Array.new
	role_contactinfos = params[:role_contactinfos][:ids] unless params[:role_contactinfos].blank?
    
	if !role_contactinfos.blank?
	  role_contactinfos.each do |rc|
        role_contactinfo = RoleContactinfo.find(rc.gsub('role_contactinfo_', ''))
        role_contactinfos_ids.push(role_contactinfo) if !session[:list_contacts_to_remove].include?(role_contactinfo)
      end
    end
	
	session[:list_contacts_to_remove] = session[:list_contacts_to_remove] + role_contactinfos_ids
    
	# role contactinfos on the current page
	page_role_contactinfos = params[:role_contactinfos][:current].split(",")
	
	page_role_contactinfos.each do |rc|
	  rc_s = "role_contactinfo_" + rc.to_s
	  if role_contactinfos.blank? || (!role_contactinfos.blank? && !role_contactinfos.include?(rc_s))
	  	session[:list_contacts_to_remove] = session[:list_contacts_to_remove].select {|c| c != RoleContactinfo.find(rc)}
	  end
	end
	
    render :text => ''
  end
  
  def list_contacts
  	#show_params(params)
  	@saved_contact_list = SavedContactList.find(params[:id])
	
	@existing_contacts = @saved_contact_list.role_contactinfos
	
	paginate_role_contactinfos
	
	render :layout => false
  end
    
  # Paginate saved contact list role contactinfos
  # to make the pagination quick and efficient for large lists and 
  # the role contactinfos sorted by person full name (last_name first)
  # or by organisation name we have to use specially created
  # saved_lists_contacts
  def paginate_role_contactinfos
    @saved_list_contacts = Array.new
	
	if ! @saved_contact_list.role_contactinfos.blank?
  	  	
      number_of_contacts_per_page = 25
      total_number_of_contacts = SavedRoleContactinfo.find(:all, :select => 'role_contactinfo_id', :conditions => ['saved_contact_list_id = ?', @saved_contact_list.saved_contact_list_id])
	  
	  @saved_list_contacts_pages = Paginator.new self, total_number_of_contacts.length, number_of_contacts_per_page, params[:page]

	  selected_list_contacts = ActiveRecord::Base.connection.execute("SELECT role_contactinfo_id " +
	  	                                                             " FROM saved_lists_contacts " +
																	 "  WHERE saved_contact_list_id=#{@saved_contact_list.saved_contact_list_id} " +
																	 "    ORDER BY contact_name " +
																	 "  LIMIT #{@saved_list_contacts_pages.items_per_page.to_i} " +
																	 "   OFFSET #{@saved_list_contacts_pages.current.offset.to_i}"
																	  )
	  
	  selected_list_contacts.each do |c_id|
	    @saved_list_contacts.push(RoleContactinfo.find(c_id['role_contactinfo_id']))
	  end
    end
  end

end
