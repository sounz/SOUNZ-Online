require 'application_helper'
require 'fastercsv'
  
class CampaignMailoutsController < ApplicationController
  include ApplicationHelper
  include ImageMceAttachmentsHelper
  
  def index
    list
    render :action => 'list'
  end

  # GETs should be safe (see http://www.w3.org/2001/tag/doc/whenToUseGet.html)
  verify :method => :post, :only => [ :destroy, :create, :update ],
         :redirect_to => { :action => :list }

  def list
    @campaign_mailouts = CampaignMailout.paginate( :page => params[:page], :order => 'created_at DESC', :per_page => 10)
  end

  # GENERATED BY SCAFFOLDING, CURRENTLY NOT IN USE
  def show
    @campaign_mailout = CampaignMailout.find(params[:id])
  end

  #------------------------
  #- New campaign mailout -
  #------------------------
  def new
    @campaign_mailout = CampaignMailout.new
    
    # set related marketing campaign
    @marketing_campaign = MarketingCampaign.find(params[:campaign])

    # project associated with the campaign
    @project = @marketing_campaign.project
    
  end

  #---------------------------
  #- Create campaign mailout -
  #---------------------------
  def create
    @campaign_mailout = CampaignMailout.new(params[:campaign_mailout])
           
    # updated by
    @campaign_mailout.updated_by = get_user.login_id
    
    # DEPRECATED
    # fields: blind_send & mail_merge are not needed anymore
    # as we do send individual emails only
    # set mailout mail_merge and blind_send values for saving
    #set_mailout_method
    
    @campaign_mailout.main_content = prepare_html(@campaign_mailout.main_content)
    
    if @campaign_mailout.save
      # save new media items
      ImageMceAttachmentsHelper.update_object_attachments(@campaign_mailout.main_content, generate_id(@campaign_mailout))
      
      flash[:notice] = 'Mailout was successfully created.'
      redirect_to :controller => 'campaign_mailouts', :action => 'edit', :id => @campaign_mailout
    else
      @campaign_mailout.updated_by = nil
	  @marketing_campaign = MarketingCampaign.find(@campaign_mailout.marketing_campaign_id)
      render :action => 'new'
    end
  end
  
  #-------------------------
  #- Edit campaign mailout -
  #-------------------------
  def edit
    @campaign_mailout = CampaignMailout.find(params[:id])
            
    # mailout's marketing campaign
    @marketing_campaign = @campaign_mailout.marketing_campaign
    
	# refresh session mailout_contacts_to_remove
	# select only those that do belong to the campaign
    if !session[:mailout_contacts_to_remove].blank?
	  session[:mailout_contacts_to_remove] = session[:mailout_contacts_to_remove].select{|c| @campaign_mailout.mailout_contacts.include?(c)}
    end
	
	logger.debug "DEBUG: session[:mailout_contacts_to_remove] #{session[:mailout_contacts_to_remove]}"
	paginate_mailout_contacts
  end


  def update
    @campaign_mailout = CampaignMailout.find(params[:id])
    
    # mailout's marketing campaign
    @marketing_campaign = @campaign_mailout.marketing_campaign
    
    # updated by
    @campaign_mailout.updated_by = get_user.login_id
    
    # DEPRECATED
    # fields: blind_send & mail_merge are not needed anymore
    # as we do send individual emails only
    # set mailout mail_merge and blind_send values for saving
    #set_mailout_method
         
    params[:campaign_mailout][:main_content] = prepare_html(params[:campaign_mailout][:main_content])
    
    if @campaign_mailout.update_attributes(params[:campaign_mailout])
      # save new media items
      ImageMceAttachmentsHelper.update_object_attachments(@campaign_mailout.main_content, generate_id(@campaign_mailout))
      
      session[:campaign_mailout_id] = nil
      flash[:notice] = 'Mailout was successfully updated.'
      redirect_to :action => 'edit', :id => @campaign_mailout
    else
      @marketing_campaign = @campaign_mailout.marketing_campaign
	  
	  paginate_mailout_contacts
      
	  render :action => 'edit'
    end
  end

  def destroy
    @campaign_mailout = CampaignMailout.find(params[:id])
    @marketing_campaign = @campaign_mailout.marketing_campaign
    @campaign_mailout.destroy
    session[:campaign_mailout_id] = nil
    redirect_to( :controller => 'marketing_campaigns', :action => 'edit', :id => @marketing_campaign.marketing_campaign_id )
  end
  
  # DEPRECATED
  # fields: blind_send & mail_merge are not needed anymore
  # as we do send individual emails only
  # -----------------------------------------------------------
  # - Set mailout mail_merge and blind_send values for saving -
  # -----------------------------------------------------------
  #def set_mailout_method
  #  if params[:post]
  #    @campaign_mailout.blind_send = false
  #    @campaign_mailout.mail_merge = false
  #    if params[:post] == 'campaign_mailout[blind_send]'
  #      @campaign_mailout.blind_send = true
  #    end
  #    if params[:post] == 'campaign_mailout[mail_merge]'
  #      @campaign_mailout.mail_merge = true
  #    end
  #  end
  #end
  
  # DEPRECATED
  # fields: blind_send & mail_merge are not needed anymore
  # as we do send individual emails only
  # ----------------------------------------------
  # - Check mailout method based on mailout type -
  # ----------------------------------------------
  #def check_mailout_method
  #  
  #  if params[:id] != nil
  #    @campaign_mailout = CampaignMailout.find(params[:id])
  #  else
  #    @campaign_mailout = CampaignMailout.new
  #  end 
  #  
  #  if params[:mailout_type] == 'p'
  #    @campaign_mailout.send('blind_send=', 'f')
  #    @campaign_mailout.send('mail_merge=', 't')
  #    @campaign_mailout.send('mailout_type=', 'p')
  #  else
  #    @campaign_mailout.send('blind_send=', 't')
  #    @campaign_mailout.send('mail_merge=', 'f')
  #    @campaign_mailout.send('mailout_type=', 'e')
  #  end
  #  
  #  render :layout => false
  #  
  #end
  
  # ---------------------------------
  # - Redirect to search processing -
  # ---------------------------------
  def mailoutContactsSearch
    @campaign_mailout = CampaignMailout.find(params[:id])
    
    # assign campaign_mailout_id to session
    session[:campaign_mailout_id] = @campaign_mailout.campaign_mailout_id
    
    # get existing campaign mailout contacts
    # and assign them to session, so that
    # they are not added again
    existing_mailout_contacts = Array.new
    
    @campaign_mailout.mailout_contacts.each do |mc|
      existing_mailout_contacts.push(mc.role_contactinfo)
    end
    
    session[:mailout_contacts] = existing_mailout_contacts
    logger.debug session[:mailout_contacts].to_yaml
    
    flash[:notice] = ' You are adding contacts to <b>' + @campaign_mailout.mailout_description + '</b> mailout'
    redirect_to :controller => 'search_contacts'
  end
  
  
  # --------------------------------------------
  # - Add selected search results to mailout -
  # --------------------------------------------
  def add_to_mailout
    session[:campaign_mailout_id] = nil
    
    @campaign_mailout = CampaignMailout.find(params[:id])
    @contacts = Array.new       
    @contacts = session[:contacts_to_add]
            
    #logger.debug "**** ADD TO MAILOUT CONTACTS ****"
       
    for contact in @contacts
      @campaign_mailout.add_mailout_contact(contact, get_user.login_id)
      session[SELECTED_CONTACTS] = session[SELECTED_CONTACTS] - [contact]
    end
    
    session[:contacts_to_add] = nil
    redirect_to :action => 'edit', :id => @campaign_mailout.campaign_mailout_id
  end

  # -----------------------------------------
  # - Dynamically remove mailout contact(s) -
  # -----------------------------------------
  def mailout_contacts_list
    @campaign_mailout = CampaignMailout.find(params[:id])
	
	if params[:remove] == 'all'
			
	  contact_ids = @campaign_mailout.mailout_contacts.map{|mc| mc.mailout_contact_id}
	  session[:mailout_contacts_to_remove]  = Array.new
		  
	# case for removing seleted only 
	else
		  
	  selected_mailout_contacts = session[:mailout_contacts_to_remove]
	  contact_ids = selected_mailout_contacts.map{|mc| mc.mailout_contact_id}
		  
	end
		
    for id in contact_ids
      mailout_contact = MailoutContact.find(id)
      #@campaign_mailout = CampaignMailout.find(mailout_contact.campaign_mailout_id)
        
	  #role_contactinfo = mailout_contact.role_contactinfo
      
	  session[:mailout_contacts_to_remove].delete(mailout_contact) if mailout_contact.destroy
      #if mailout_contact.destroy
	  # WR#53662 - system performance issues:
	  # solr re-indexing of role contactinfos takes a lot of time
	  # for large lists, as per Scilla's note dated 12:44 23-05-2008
	  # commented out solr re-indexing      
      #  role_contactinfo.save # update for solr
      #end
      
    end
	
	paginate_mailout_contacts
	
    render :layout => false
	
  end
  
  # -------------------------------------------------------
  # - Copy the content of main_content, secondary_content -
  # - field from the choosen campaign mailout             -
  # -------------------------------------------------------
  def copy_contents
    if !params[:mailout_template].blank?
      if !params[:id].blank?
        @campaign_mailout = CampaignMailout.find(params[:id])
      else
        @campaign_mailout = CampaignMailout.new
      end
      
      campaign_mailout_to_copy_from = CampaignMailout.find(params[:mailout_template])
      
      @campaign_mailout.send('main_content=', campaign_mailout_to_copy_from.main_content)
      @campaign_mailout.send('secondary_content=', campaign_mailout_to_copy_from.secondary_content)
      
      render :layout => false
      
    end
    
  end
  
  # ----------------------------------------------
  # - Set 'Send requested' flag (mailout_status) -
  # ----------------------------------------------
  def mailing_send_requested
    @campaign_mailout = CampaignMailout.find(params[:id])
        
    @campaign_mailout.mailout_status = 'r'
    # special case when mailout was sent once and
    # have some failed deliveries
    @campaign_mailout.mailout_status = 'i' unless @campaign_mailout.failed_email_delivery_contacts.blank?
    @campaign_mailout.sent_timestamp = Time.now 
    
    if @campaign_mailout.save
      # go through failed email delivery contacts if any
      # and set the delivery_timestamp to null, so that they
      # are picked up by crm-emailer.php for mailing
      @campaign_mailout.failed_email_delivery_contacts.each do |mc|
        mc.update_attribute(:delivery_timestamp, '')
      end
      redirect_to :action => 'edit', :id => @campaign_mailout
    else
      render :action => 'edit'
    end
    
  end
  
  # -------------------------------------------------------------
  # - Cancel mailing                                            -
  # - only works if mailout_status is still 'Send requested',   -
  # - if mailout status is 'Send in progress' or 'Sent', return -
  # - the message advising about that                           -
  # -------------------------------------------------------------
  def cancel_mailing
    @campaign_mailout = CampaignMailout.find(params[:id]) unless params[:id].blank?
    
    if !@campaign_mailout.blank?
      if @campaign_mailout.mailout_status.match('r')
        if @campaign_mailout.update_attribute(:mailout_status, 'n')
          flash[:notice] = ' Mailing is cancelled'
        else
          flash[:notice] = ' An error has occured'
        end
      elsif @campaign_mailout.mailout_status.match('i')
        flash[:notice] = ' Mailing is in progress. It cannot be cancelled'
      elsif @campaign_mailout.mailout_status.match('s')
        flash[:notice] = ' Too late. The mailing is sent'    
      end
    end
    redirect_to :action => 'edit', :id => @campaign_mailout
  end
  
  # -----------------------------------------
  # - Return mailout contacts in CSV format -
  #------------------------------------------
  def export_contacts
    if !params[:id].blank?
      @campaign_mailout = CampaignMailout.find(params[:id])
      
      stream_csv do |csv|
        csv << [
                "ADDRESS_LINE1",
                "ADDRESS_LINE2",
                "ADDRESS_LINE3",
                "ADDRESS_LINE4",
                "ADDRESS_LINE5",
                "ADDRESS_LINE6",
                "ADDRESS_LINE7",
                "NOMEN",
                "FIRST_NAME",
                "LAST_NAME",
                "ROLE_TITLE",
                "ORGANISATION",
                "BUILDING",
                "STREET",
                "SUBURB",
                "LOCALITY",
                "POSTCODE",
                "REGION",
                "COUNTRY",
                "EMAIL",
                "PHONE",
                "FAX",
                "MOBILE",
                "SALUTATION"
                ]
        @campaign_mailout.mailout_contacts.each do |c|
          firstname = ''
          lastname = ''
          if !c.name.nil? 
            split = c.name.split(' ', 2)
            if split.length > 0
              firstname = split[0]
              lastname  = split[-1]
            end
          end
          csv << [
                  c.address_line1,
                  c.address_line2,
                  c.address_line3,
                  c.address_line4,
                  c.address_line5,
                  c.address_line6,
                  c.address_line7,
                  c.nomen,
                  firstname,
                  lastname,
                  c.role_title,
                  c.organisation_name,
                  c.building,
                  c.street,
                  c.suburb,
                  c.locality,
                  c.postcode,
                  c.region,
                  c.country,
                  c.email,
                  c.phone,
                  c.fax,
                  c.mobile_sms,
                  c.salutation
                  ]
        end
      end
    end
  end

  
  # ---------------------------------------
  # - Send test email to the current user -
  # ---------------------------------------
  def send_test_email
    @campaign_mailout = CampaignMailout.find(params[:id])
    
    # mailout's marketing campaign
    @marketing_campaign = @campaign_mailout.marketing_campaign
    
    recipient = params[:email_address]
    
    # currently not used params
    bcc_recipients = nil
    
    # salutation
    salutation = ''
    person = Login.find(get_user.login_id).person
    salutation = Login.find(get_user.login_id).person.salutation if !person.blank?
    
    # contact details
    contact_details = 'CONTACT DETAILS ARE NOT INSERTED DURING TEST' # do we need to find a way to get current user contact details for testing???
    
    # email subject and sender
    sender = Setting.get_value(Setting::CAMPAIGN_MAILOUT_SENDER_EMAIL)
    subject = @campaign_mailout.mailout_description
    
    # preparing html content
    html_content = ''
    html_content = @campaign_mailout.main_content
    personalized_content_html = personalize_content(@campaign_mailout.main_content, salutation, person.full_name, contact_details)
    personalized_content_html = strip_illegal_characters(personalized_content_html, 'html')
    
    # preparing plain content
    if !@campaign_mailout.secondary_content.blank?
      personalized_plain_text = personalize_content(@campaign_mailout.secondary_content, salutation, person.full_name, contact_details)
    else
      personalized_plain_text = personalized_content_html
    end
    personalized_plain_text = strip_illegal_characters(personalized_plain_text)
    
    logger.debug "========================================"
    logger.debug "+++++++++ SEND EMAIL +++++++++++++++++++"
    logger.debug "***** Recipient: #{recipient} "
      
    if !recipient.blank?
      mailing = Mailing::deliver_mail_mailout(recipient, sender, subject, personalized_content_html, personalized_plain_text)
      logger.debug "***** Email sent: #{mailing} "
      if mailing
        text = 'Test Email is sent'
      else
        text = 'Test Email is failed'
      end 
      #redirect_to :action => 'edit', :id => @campaign_mailout
    else
      logger.debug "***** Email failed "
      text = 'Please select an email to send the test email to'
      #render :action => 'edit', :id => @campaign_mailout
    end
    
    render :text => text
  end
  
  def mailout_contacts
  	#show_params(params)
  	@campaign_mailout = CampaignMailout.find(params[:id])
	#logger.debug "DEBUG: @campaign_mailout #{@campaign_mailout.id}"
	paginate_mailout_contacts
	
	render :layout => false
  end  
  
  #-----------------------------------------------
  #- Set 'mailout contacts to remove' in session -
  #-----------------------------------------------
  def set_selected_contacts
    #logger.debug "****** UPDATE SELECTED CONTACTS *****"
    #show_params(params)
	@campaign_mailout = CampaignMailout.find(params[:campaign_mailout_id])
	
	session[:mailout_contacts_to_remove] = Array.new if session[:mailout_contacts_to_remove].blank?
	
	selected_mailout_contacts = Array.new
	mailout_contacts_ids = params[:mailout_contact][:mailout_contact_id] unless params[:mailout_contact].blank?
    
	if !mailout_contacts_ids.blank?
	  mailout_contacts_ids.each do |mc|
        mailout_contact = MailoutContact.find(mc.gsub('mailout_contact_', ''))
        selected_mailout_contacts.push(mailout_contact) if !session[:mailout_contacts_to_remove].include?(mailout_contact)
      end
    end
	
	session[:mailout_contacts_to_remove] = session[:mailout_contacts_to_remove] + selected_mailout_contacts
	
	# mailout contacts on the current page
	page_mailout_contacts = params[:current_page_mailout_contacts].split(",")
	
	page_mailout_contacts.each do |id|
	  if mailout_contacts_ids.blank? || (!mailout_contacts_ids.blank? && !mailout_contacts_ids.include?("mailout_contact_#{id}"))
	  	session[:mailout_contacts_to_remove] = session[:mailout_contacts_to_remove].select {|c| c != MailoutContact.find(id)}
	  end
	end
    render :text => ''
  end
    
  private
   
  # -----------------------------------------------------------------
  # Personilize content by replacing SALUTATION, NAME, CURRENT_DATE
  # and CONTACT_DETAILS tags if any with appropriate contact details.
  # Note that the placeholders are case-insensitive, ie. %name% is
  # the same as %NAME% etc.
  # @param string content
  # @param string salutation
  # @param string name
  # @param string contact_details
  # -----------------------------------------------------------------
  def personalize_content(content, salutation, name, contact_details)
    if !content.blank?
      # replace salutation tags with the salutation
      content = content.gsub(/(%salutation%)/i, salutation)
  
      # replace name tags with the recipient name
      content = content.gsub(/%name%/i, name)
    
      # replace date tags with 'today' date
      date = Time.now.strftime("%d %B %Y")
      content = content.gsub(/(%date%)/i, date)
      
      # replace contact details tags with appropriate details
      content = content.gsub(/%contact details%/i, contact_details)
    end
    
    return content
  end
  
  # --------------------------------
  # Strip illegal characters
  # @param string content
  # @param string format
  # --------------------------------
  def strip_illegal_characters(content, format="plain")
    if !content.blank?
      # replace any extra ('user-defined') tags
      content = content.gsub(/%+\S*%+/, " ")

      content = strip_html(content, []) if format.match('plain')
    end
    return content
    
  end
  
 
  
  # ------------------------------------
  # - Prepare html content for mailing -
  # ------------------------------------
  def prepare_html(main_content)
    
    html_content = nil
    
	if !main_content.blank?
      # get website url from settings
      website_url = Setting.find(:first, :conditions => ['LOWER(setting_name) LIKE ?', '%websiteurl%'])
      
	  # just a measure to make sure that the links of images display the correct (current) host name
	  # as some of the templates still have production.sounz.org.nz     
	  html_content = main_content.gsub(/(<img src="http:\/\/)[^\/]*\/{1}/, '<img src="http://' + website_url.setting_value + '/')
	  	  
      # replace all empty host names of the
	  html_content = html_content.gsub('<img src="../../', '<img src="http://' + website_url.setting_value + '/')
	  html_content = html_content.gsub('<img src="../', '<img src="http://' + website_url.setting_value + '/')
	  
      # replace all empty host names of the links (TinyMCE automatically replaces the host name of the server by '../../')
	  html_content = html_content.gsub('<a href="../../', '<a href="http://' + website_url.setting_value + '/')   
  
    end
    
    return html_content
    
  end
  
  # -----------------------------------------------------------
  # - Send csv formatted output directly to the HTTP response -
  # -----------------------------------------------------------
  def stream_csv
     if !params[:id].blank?
       @campaign_mailout = CampaignMailout.find(params[:id])
       filename = @campaign_mailout.mailout_description + ".csv"
     else
       filename = params[:action] + ".csv"
     end   

     #this is required if you want this to work with IE        
     if request.env['HTTP_USER_AGENT'] =~ /msie/i
       headers['Pragma'] = 'public'
       headers["Content-type"] = "text/plain" 
       headers['Cache-Control'] = 'no-cache, must-revalidate, post-check=0, pre-check=0'
       headers['Content-Disposition'] = "attachment; filename=\"#{filename}\"" 
       headers['Expires'] = "0" 
     else
       headers["Content-Type"] ||= 'text/csv'
       headers["Content-Disposition"] = "attachment; filename=\"#{filename}\"" 
     end

    render :text => Proc.new { |response, output|
      csv = FasterCSV.new(output, :row_sep => "\r\n") 
      yield csv
    }
  end
  
  # Paginate mailout contacts
  # to make the pagination quick and efficient for large lists and 
  # the mailout contacts sorted by person's name
  # or by organisation name we have to use specially created
  # campaign_mailouts_contacts
  def paginate_mailout_contacts
	  @campaign_mailout_contacts = Array.new
	  
	  if ! @campaign_mailout.mailout_contacts.blank?
		  
		if @campaign_mailout.mailout_type == 'p'
		  number_of_contacts_per_page = 10
		elsif @campaign_mailout.mailout_type == 'e'
		  number_of_contacts_per_page = 25
		end
		
		total_number_of_contacts = MailoutContact.find(:all, :select => 'mailout_contact_id', :conditions => ['campaign_mailout_id = ?', @campaign_mailout.campaign_mailout_id])
		
		@campaign_mailout_contacts_pages = Paginator.new self, total_number_of_contacts.length, number_of_contacts_per_page, params[:page]
  
		selected_mailout_contacts = ActiveRecord::Base.connection.execute("SELECT mailout_contact_id "        +
																		  " FROM campaign_mailouts_contacts " +
																		  "  WHERE campaign_mailout_id=#{@campaign_mailout.campaign_mailout_id} " +
																		  "    ORDER BY contact_name " +
																		  "  LIMIT #{@campaign_mailout_contacts_pages.items_per_page.to_i} " +
																		  "   OFFSET #{@campaign_mailout_contacts_pages.current.offset.to_i}"
																		)
		
		selected_mailout_contacts.each do |c_id|
		  @campaign_mailout_contacts.push(MailoutContact.find(c_id['mailout_contact_id']))
		end
	  end  	
  end

end
